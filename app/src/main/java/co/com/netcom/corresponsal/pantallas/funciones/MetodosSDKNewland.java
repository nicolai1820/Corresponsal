package co.com.netcom.corresponsal.pantallas.funciones;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.middleware.manager.ErrorCode;
import com.middleware.manager.NLPosManager;
import com.newland.depend.PosManagerDelegate;
import com.newland.depend.entity.CardInfoEntity;
import com.newland.depend.entity.DeviceInformation;
import com.newland.depend.entity.ReadCardInfo;
import com.newland.depend.enums.CARD_STATE;
import com.newland.depend.enums.DataEncryptTypeEnum;
import com.newland.depend.enums.MediaTypeEnum;
import com.newland.mtype.module.common.cardreader.OpenCardType;
import com.newland.mtype.module.common.emv.AIDConfig;
import com.newland.mtype.module.common.pin.MacAlgorithm;
import com.newland.mtype.module.common.pin.PinManageType;
import com.newland.mtype.util.Dump;
import com.newland.mtype.util.ISOUtils;

import co.com.netcom.corresponsal.core.comunicacion.CardDTO;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.consultaSaldo.pantallaConsultaSaldoLectura;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.inicio.ajustes.pantallaAjustesUsuarioComun;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.pagoFacturas.tarjetaEmpresarial.PantallaTarjetaEmpresarialLectura;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.retiro.conTarjeta.PantallaRetiroConTarjetaLoader;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.retiro.sinTarjeta.pantallaRetiroSinTarjetaPin;
import co.com.netcom.corresponsal.pantallas.corresponsal.usuarioComun.transacciones.transferencia.pantallaTransferenciaLectura;


public class MetodosSDKNewland {

    private Context context;
    private static final int TIMEOUT = 5000;
    private NLPosManager nlPosManager;
    private BluetoothAdapter bluetoothAdapter;
    private BluetoothManager bluetoothManager;
    private ArrayList<String> listDevices = new ArrayList<>();;
    private CardDTO datosTarjeta;
    private static List<Integer> cipherTag;
    private static List<Integer> plainTag;
    private String [] track2;
    private String ultimosCuatro;
    private String bin;
    private String direccion;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor sharedPreferencesEditor;
    private String pinBlockFinal;
    private String estado="";
    private int codigoTransaccion;


    public static final int RETIRO =1;
    public static final int CONSULTA_SALDO =2;
    public static final int TRANSFERENCIA =3;
    public static final int TARJETA_EMPRESARIAL=4;
    public final static int CONTACTLESS=6;


    public static final int DEFAULT_MK_INDEX = 1;
    public static final int DEFAULT_TLK_INDEX = 10;
    public static final int DEFAULT_PIN_WK_INDEX = 2;
    public static final int DEFAULT_MAC_WK_INDEX = 2;
    public static final int DEFAULT_DATA_WK_INDEX = 2;
    public static final int DEFAULT_DATA_KSN_INDEX = 2;


    String DataforMac = "313330343832333030313031303043303038303431303037383631393131303731323337323818FFFF18159753E000013630398000000000";


    private static void sdkInit() {
        plainTag = new ArrayList<Integer>();
        plainTag.add(0x82);
        plainTag.add(0x9F02);
        plainTag.add(0x9F03);
        plainTag.add(0x50);
        plainTag.add(0x9F12);
        plainTag.add(0x9F36);
        plainTag.add(0x9F26);
        plainTag.add(0x9F27);//check 9F27 bite8-7 : 00 - AAC ; 01 - TC ; 10 - ARQC
        plainTag.add(0x9F34);
        plainTag.add(0x84);
        plainTag.add(0x9F10);
        plainTag.add(0x9F1E);
        plainTag.add(0x9F35);
        plainTag.add(0x95);
        plainTag.add(0x9F1A);
        plainTag.add(0x5F2A);
        plainTag.add(0x9A);
        plainTag.add(0x9F37);
        plainTag.add(0x9C);
        plainTag.add(0x8A);
        plainTag.add(0x9F19);
        plainTag.add(0x9F6C);
        plainTag.add(0x9F66);
        plainTag.add(0x57);  //This is for Track2 data
        plainTag.add(0x4F);
        plainTag.add(0x9F06);
		/*plainTag.add(0x5A);
		plainTag.add(0x9F24);
		plainTag.add(0x9F33);
		plainTag.add(0x9F6E);
		plainTag.add(0x5F20);
		plainTag.add(0x5F24);
		plainTag.add(0x9F16);
		plainTag.add(0x9F21);
		plainTag.add(0x5F30);
		plainTag.add(0x9F4E);
		plainTag.add(0x9B);
		plainTag.add(0x9F15);*/
        //DF75 to know the final result aftr second gen AC





        cipherTag = new ArrayList<Integer>();
        cipherTag.add(0x5F20);
        cipherTag.add(0x4f);
        cipherTag.add(0x5F24);
        cipherTag.add(0x9F16);
        cipherTag.add(0x9F21);
        cipherTag.add(0x9A);
        cipherTag.add(0x9F02);
        cipherTag.add(0x9F03);
        cipherTag.add(0x9F34);
        cipherTag.add(0x9F12);
        cipherTag.add(0x9F06);
        cipherTag.add(0x5F30);
        cipherTag.add(0x9F4E);
        cipherTag.add(0x5A);
        cipherTag.add(0x57);
        cipherTag.add(0x9F10);
        cipherTag.add(0x82);
        cipherTag.add(0x8E);
        cipherTag.add(0x5F25);
        cipherTag.add(0x9F07);
        cipherTag.add(0x9F0D);
        cipherTag.add(0x9F0E);
        cipherTag.add(0x9F0F);
        cipherTag.add(0x9F26);
        cipherTag.add(0x9F27);
        cipherTag.add(0x9F39);
        cipherTag.add(0x9C);
        cipherTag.add(0x9F33);
        cipherTag.add(0x9F37);
        cipherTag.add(0x9F36);
        cipherTag.add(0x9F40);
        cipherTag.add(0x95);
        cipherTag.add(0x9B);
        cipherTag.add(0x84);
        cipherTag.add(0x5F2A);
        cipherTag.add(0x5F34);
        cipherTag.add(0x9F09);
        cipherTag.add(0x9F1A);
        cipherTag.add(0x9F1E);
        cipherTag.add(0x9F35);
        cipherTag.add(0x5F28);
        cipherTag.add(0x50);
        cipherTag.add(0x9F08);
        cipherTag.add(0x8A);
        cipherTag.add(0x9F4C);
    }

    private PosManagerDelegate swiperCardChangedListener = new PosManagerDelegate() {


        @Override
        public void onScannerResult(BluetoothDevice devInfo) {
            Log.d("onScannerResult","onScannerResult");

            String sSubCadena = devInfo.getAddress().substring(0,5);

            if (sSubCadena.equals("08:00")){
                listDevices.add(devInfo.getName() + "\n" + devInfo.getAddress());
                Log.d("AGREGUE",devInfo.getAddress());

            }

        }

        @Override
        public void discoverComplete(ArrayList<BluetoothDevice> devInfoList) {
            //appendString("discoverComplete, "+ devInfoList);
            Log.d("discoverComplete","discoverComplete");

            try{
                Message apagarLeds = new Message();
                apagarLeds.what = 3;
                pantallaAjustesUsuarioComun.procesoTransacion.sendMessage(apagarLeds);
            }catch (Exception e){}
            Log.d("LISTA", listDevices.toString());
            setListDevices(listDevices);

        }

        @Override
        public void onConnectSucc() {

            if (sharedPreferences.contains(direccion)){

                sharedPreferencesEditor.putString("DireccionUltimaConexion",direccion);
                sharedPreferencesEditor.commit();
                try {
                    Message conexionExitosa= new Message();
                    conexionExitosa.what = 1;
                    pantallaAjustesUsuarioComun.procesoTransacion.sendMessage(conexionExitosa);
                } catch (Exception e){

                }

            }else{
                Thread t = new  Thread(new Runnable() {
                    @Override
                    public void run() {
                        /*String paramString = "9F0605A000000228DF0101009F09020001DF14039F37049F7B06000000000000DF160199DF2106000000007500DF1906000000000000DF2006000000010000DF180101DF1105B050148800DF13050000880000DF1205B050149800DF1701999F1B0400000000DF150400000000";
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000043060DF0101009F08020002DF1105FC5058A000DF1205F85058F800DF130504000000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000651010DF0101009F08020200DF1105FC6024A800DF1205FC60ACF800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000333010101DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000333010102DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000333010103DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000333010106DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000025010402DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607AAA00000010002DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0608A000000003101005DF0101019F0902008CDF250102DF140B9F37049F47018F019F3201DF2401009F7B06000000000000DF160100DF1906000000100000DF2006000099999999DF2106000000009999DF180100DF11050000000000DF13050010000000DF12050000000000DF1701009F1B0400002710DF150400001388DF240101");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000031010DF0101019F0902008CDF11050000000000DF12050000000000DF130500000000009F1B0400002710DF150400001388DF160100DF170100DF140B9F37049F47018F019F3201DF1801009F7B06000000000000DF1906000000000000DF2006000000000000DF240101DF250102");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000032010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000033010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000033010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000041010DF0101009F08020002DF1105FC5080A000DF1205F85080F800DF130504000000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        nlPosManager.addAID(MediaTypeEnum.ALL, "9F0607A0000000041010DF0101009F08020002DF1105FC5080A000DF1205F85080F800DF130504000000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF1906000000100000DF2006000999999999DF2106000000100000");
                        String paramString1 = "9F0605A000000228DF0101009F09020001DF14039F37049F7B06000000000000DF160199DF2106000000007500DF1906000000000000DF2006000000010000DF180101DF1105B050148800DF13050000880000DF1205B050149800DF1701999F1B0400000000DF150400000000";
                        nlPosManager.addAID(MediaTypeEnum.CONTACT, paramString1);

                        String pubKey ="9F0605A0000000039F220190DF05083230313531323331DF060101DF070101DF0240C26B3CB3833E42D8270DC10C8999B2DA18106838650DA0DBF154EFD51100AD144741B2A87D6881F8630E3348DEA3F78038E9B21A697EB2A6716D32CBF26086F1DF0403000003DF0314B3AE2BC3CAFC05EEEFAA46A2A47ED51DE679F823";
                        nlPosManager.addCAPublicKey(pubKey);
                        nlPosManager.addCAPublicKey("DF050420991231DF0403000003DF0314D34A6A776011C7E7CE3AEC5F03AD2F8CFC5503CC9F0605A000000003DF028180C696034213D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1228DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75DF0701019F220101DF060101");
                        nlPosManager.addCAPublicKey("9F0605A0000000659F220109DF05083230303931323331DF060101DF070101DF028180B72A8FEF5B27F2B550398FDCC256F714BAD497FF56094B7408328CB626AA6F0E6A9DF8388EB9887BC930170BCC1213E90FC070D52C8DCD0FF9E10FAD36801FE93FC998A721705091F18BC7C98241CADC15A2B9DA7FB963142C0AB640D5D0135E77EBAE95AF1B4FEFADCF9C012366BDDA0455C1564A68810D7127676D493890BDDF040103DF03144410C6D51C2F83ADFD92528FA6E38A32DF048D0A");
                        nlPosManager.addCAPublicKey("9F0605A0000000659F220110DF05083230313231323331DF060101DF070101DF02819099B63464EE0B4957E4FD23BF923D12B61469B8FFF8814346B2ED6A780F8988EA9CF0433BC1E655F05EFA66D0C98098F25B659D7A25B8478A36E489760D071F54CDF7416948ED733D816349DA2AADDA227EE45936203CBF628CD033AABA5E5A6E4AE37FBACB4611B4113ED427529C636F6C3304F8ABDD6D9AD660516AE87F7F2DDF1D2FA44C164727E56BBC9BA23C0285DF040103DF0314C75E5210CBE6E8F0594A0F1911B07418CADB5BAB");
                        nlPosManager.addCAPublicKey("9F0605A0000000659F220112DF05083230313431323331DF060101DF070101DF0281B0ADF05CD4C5B490B087C3467B0F3043750438848461288BFEFD6198DD576DC3AD7A7CFA07DBA128C247A8EAB30DC3A30B02FCD7F1C8167965463626FEFF8AB1AA61A4B9AEF09EE12B009842A1ABA01ADB4A2B170668781EC92B60F605FD12B2B2A6F1FE734BE510F60DC5D189E401451B62B4E06851EC20EBFF4522AACC2E9CDC89BC5D8CDE5D633CFD77220FF6BBD4A9B441473CC3C6FEFC8D13E57C3DE97E1269FA19F655215B23563ED1D1860D8681DF040103DF0314874B379B7F607DC1CAF87A19E400B6A9E25163E8");
                        nlPosManager.addCAPublicKey("9F0605A0000000659F220114DF05083230313631323331DF060101DF070101DF0281F8AEED55B9EE00E1ECEB045F61D2DA9A66AB637B43FB5CDBDB22A2FBB25BE061E937E38244EE5132F530144A3F268907D8FD648863F5A96FED7E42089E93457ADC0E1BC89C58A0DB72675FBC47FEE9FF33C16ADE6D341936B06B6A6F5EF6F66A4EDD981DF75DA8399C3053F430ECA342437C23AF423A211AC9F58EAF09B0F837DE9D86C7109DB1646561AA5AF0289AF5514AC64BC2D9D36A179BB8A7971E2BFA03A9E4B847FD3D63524D43A0E8003547B94A8A75E519DF3177D0A60BC0B4BAB1EA59A2CBB4D2D62354E926E9C7D3BE4181E81BA60F8285A896D17DA8C3242481B6C405769A39D547C74ED9FF95A70A796046B5EFF36682DC29DF040103DF0314C0D15F6CD957E491DB56DCDD1CA87A03EBE06B7B");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220101DF05083230303931323331DF060101DF070101DF028180BBE9066D2517511D239C7BFA77884144AE20C7372F515147E8CE6537C54C0A6A4D45F8CA4D290870CDA59F1344EF71D17D3F35D92F3F06778D0D511EC2A7DC4FFEADF4FB1253CE37A7B2B5A3741227BEF72524DA7A2B7B1CB426BEE27BC513B0CB11AB99BC1BC61DF5AC6CC4D831D0848788CD74F6D543AD37C5A2B4C5D5A93BDF040103DF0314E881E390675D44C2DD81234DCE29C3F5AB2297A0");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220102DF05083230313431323331DF060101DF070101DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A57DF040103DF031403BB335A8549A03B87AB089D006F60852E4B8060");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220103DF05083230313731323331DF060101DF070101DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33DDF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220104DF05083230313731323331DF060101DF070101DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF1DF040103DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5");
                        nlPosManager.addCAPublicKey("9F0605A0000000039F220101DF05083230303931323331DF060101DF070101DF028180C696034213D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1228DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75DF040103DF0314D34A6A776011C7E7CE3AEC5F03AD2F8CFC5503CC");
                        nlPosManager.addCAPublicKey("9F0605A0000000039F220107DF05083230313231323331DF060101DF070101DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725FDF040103DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172");
                        nlPosManager.addCAPublicKey("9F0605A0000000049F220103DF05083230303931323331DF060101DF070101DF028180C2490747FE17EB0584C88D47B1602704150ADC88C5B998BD59CE043EDEBF0FFEE3093AC7956AD3B6AD4554C6DE19A178D6DA295BE15D5220645E3C8131666FA4BE5B84FE131EA44B039307638B9E74A8C42564F892A64DF1CB15712B736E3374F1BBB6819371602D8970E97B900793C7C2A89A4A1649A59BE680574DD0B60145DF040103DF03145ADDF21D09278661141179CBEFF272EA384B13BB");
                        nlPosManager.addCAPublicKey("9F0605A0000000039F220108DF05083230313431323331DF060101DF070101DF0281B0D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0BDF040103DF031420D213126955DE205ADC2FD2822BD22DE21CF9A8");
                        nlPosManager.addCAPublicKey("9F0605A0000000049F220104DF05083230313231323331DF060101DF070101DF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC5DF040103DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6C");
                        nlPosManager.addCAPublicKey("9F0605A0000000039F220109DF05083230313631323331DF060101DF070101DF0281F89D912248DE0A4E39C1A7DDE3F6D2588992C1A4095AFBD1824D1BA74847F2BC4926D2EFD904B4B54954CD189A54C5D1179654F8F9B0D2AB5F0357EB642FEDA95D3912C6576945FAB897E7062CAA44A4AA06B8FE6E3DBA18AF6AE3738E30429EE9BE03427C9D64F695FA8CAB4BFE376853EA34AD1D76BFCAD15908C077FFE6DC5521ECEF5D278A96E26F57359FFAEDA19434B937F1AD999DC5C41EB11935B44C18100E857F431A4A5A6BB65114F174C2D7B59FDF237D6BB1DD0916E644D709DED56481477C75D95CDD68254615F7740EC07F330AC5D67BCD75BF23D28A140826C026DBDE971A37CD3EF9B8DF644AC385010501EFC6509D7A41DF040103DF03141FF80A40173F52D7D27E0F26A146A1C8CCB29046");
                        nlPosManager.addCAPublicKey("9F0605A0000000049F220105DF05083230313431323331DF060101DF070101DF0281B0B8048ABC30C90D976336543E3FD7091C8FE4800DF820ED55E7E94813ED00555B573FECA3D84AF6131A651D66CFF4284FB13B635EDD0EE40176D8BF04B7FD1C7BACF9AC7327DFAA8AA72D10DB3B8E70B2DDD811CB4196525EA386ACC33C0D9D4575916469C4E4F53E8E1C912CC618CB22DDE7C3568E90022E6BBA770202E4522A2DD623D180E215BD1D1507FE3DC90CA310D27B3EFCCD8F83DE3052CAD1E48938C68D095AAC91B5F37E28BB49EC7ED597DF040103DF0314EBFA0D5D06D8CE702DA3EAE890701D45E274C845");
                        nlPosManager.addCAPublicKey("9F0605A0000000049F220106DF05083230313631323331DF060101DF070101DF0281F8CB26FC830B43785B2BCE37C81ED334622F9622F4C89AAE641046B2353433883F307FB7C974162DA72F7A4EC75D9D657336865B8D3023D3D645667625C9A07A6B7A137CF0C64198AE38FC238006FB2603F41F4F3BB9DA1347270F2F5D8C606E420958C5F7D50A71DE30142F70DE468889B5E3A08695B938A50FC980393A9CBCE44AD2D64F630BB33AD3F5F5FD495D31F37818C1D94071342E07F1BEC2194F6035BA5DED3936500EB82DFDA6E8AFB655B1EF3D0D7EBF86B66DD9F29F6B1D324FE8B26CE38AB2013DD13F611E7A594D675C4432350EA244CC34F3873CBA06592987A1D7E852ADC22EF5A2EE28132031E48F74037E3B34AB747FDF040103DF0314F910A1504D5FFB793D94F3B500765E1ABCAD72D9");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220108DF050420301231DF060101DF070101DF028190B61645EDFD5498FB246444037A0FA18C0F101EBD8EFA54573CE6E6A7FBF63ED21D66340852B0211CF5EEF6A1CD989F66AF21A8EB19DBD8DBC3706D135363A0D683D046304F5A836BC1BC632821AFE7A2F75DA3C50AC74C545A754562204137169663CFCC0B06E67E2109EBA41BC67FF20CC8AC80D7B6EE1A95465B3B2657533EA56D92D539E5064360EA4850FED2D1BFDF040103DF0314EE23B616C95C02652AD18860E48787C079E8E85A");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220109DF05083230333031323331DF060101DF070101DF0281B0EB374DFC5A96B71D2863875EDA2EAFB96B1B439D3ECE0B1826A2672EEEFA7990286776F8BD989A15141A75C384DFC14FEF9243AAB32707659BE9E4797A247C2F0B6D99372F384AF62FE23BC54BCDC57A9ACD1D5585C303F201EF4E8B806AFB809DB1A3DB1CD112AC884F164A67B99C7D6E5A8A6DF1D3CAE6D7ED3D5BE725B2DE4ADE23FA679BF4EB15A93D8A6E29C7FFA1A70DE2E54F593D908A3BF9EBBD760BBFDC8DB8B54497E6C5BE0E4A4DAC29E5DF040103DF0314A075306EAB0045BAF72CDD33B3B678779DE1F527");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F22010ADF05083230333031323331DF060101DF070101DF028180B2AB1B6E9AC55A75ADFD5BBC34490E53C4C3381F34E60E7FAC21CC2B26DD34462B64A6FAE2495ED1DD383B8138BEA100FF9B7A111817E7B9869A9742B19E5C9DAC56F8B8827F11B05A08ECCF9E8D5E85B0F7CFA644EFF3E9B796688F38E006DEB21E101C01028903A06023AC5AAB8635F8E307A53AC742BDCE6A283F585F48EFDF040103DF0314C88BE6B2417C4F941C9371EA35A377158767E4E3");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F22010BDF05083230333031323331DF060101DF070101DF0281F8CF9FDF46B356378E9AF311B0F981B21A1F22F250FB11F55C958709E3C7241918293483289EAE688A094C02C344E2999F315A72841F489E24B1BA0056CFAB3B479D0E826452375DCDBB67E97EC2AA66F4601D774FEAEF775ACCC621BFEB65FB0053FC5F392AA5E1D4C41A4DE9FFDFDF1327C4BB874F1F63A599EE3902FE95E729FD78D4234DC7E6CF1ABABAA3F6DB29B7F05D1D901D2E76A606A8CBFFFFECBD918FA2D278BDB43B0434F5D45134BE1C2781D157D501FF43E5F1C470967CD57CE53B64D82974C8275937C5D8502A1252A8A5D6088A259B694F98648D9AF2CB0EFD9D943C69F896D49FA39702162ACB5AF29B90BADE005BC157DF040103DF0314BD331F9996A490B33C13441066A09AD3FEB5F66C");
                        nlPosManager.addCAPublicKey("9F0605A0000003339F220180DF05083230333031323331DF060101DF070101DF028180CCDBA686E2EFB84CE2EA01209EEB53BEF21AB6D353274FF8391D7035D76E2156CAEDD07510E07DAFCACABB7CCB0950BA2F0A3CEC313C52EE6CD09EF00401A3D6CC5F68CA5FCD0AC6132141FAFD1CFA36A2692D02DDC27EDA4CD5BEA6FF21913B513CE78BF33E6877AA5B605BC69A534F3777CBED6376BA649C72516A7E16AF85DF0403010001DF0314A5E44BB0E1FA4F96A11709186670D0835057D35E");
                        nlPosManager.addCAPublicKey("9F0605A0000000049F2201F6DF05083230303931323331DF060101DF070101DF0281E0A25A6BD783A5EF6B8FB6F83055C260F5F99EA16678F3B9053E0F6498E82C3F5D1E8C38F13588017E2B12B3D8FF6F50167F46442910729E9E4D1B3739E5067C0AC7A1F4487E35F675BC16E233315165CB142BFDB25E301A632A54A3371EBAB6572DEEBAF370F337F057EE73B4AE46D1A8BC4DA853EC3CC12C8CBC2DA18322D68530C70B22BDAC351DD36068AE321E11ABF264F4D3569BB71214545005558DE26083C735DB776368172FE8C2F5C85E8B5B890CC682911D2DE71FA626B8817FCCC08922B703869F3BAEAC1459D77CD85376BC36182F4238314D6C4212FBDD7F23D3DF040103DF0314502909ED545E3C8DBD00EA582D0617FEE9F6F684");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F220114DF05083230303931323331DF060101DF070101DF02B31FF647CA3D5470E868FFAFF1D7AE98B15973F4303E5209F1B2677C5E214DC3FC38015FE6181387B9D404B0CED88AABC1F9360907F8416CD7D1AFF56E42EA2E60EC7689E25CEFDD1A37ADCBCA9FBDD0AF2CA5F21378DB401E74EA3D8B2D37A7014B78ED08E10F18021FE37F17A1420F0B617A9A94A4336F854075BE3D26EF8D759A3D3BE907340BF7EA9DD5C77F17F89F574ACF7AAF12AE0AA3F8F2E20C349132987410C100C05FA8F2077B14BFFAC5DF0403DF036BE6BA60529B3FB7AFBB1F72D83FAB3EC31AA05D");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F1DF05083230303931323331DF060101DF070101DF02A500B6EED90FEA2999862D101C2F29309A24D1FD3E10501EB70DDE3DE403A5451F6B5CDA0748C87A4E8EFE916FC968FBB3808D6C7561ED3A3B4C74E8A158179C6EE8FEA1B6D9877C2C22B453F5A72E23078970FAAEF7D6855BA452865F2D69CDF675A82CC7CF19BEE4167D5E08F14BB2A756BA8F13B2DB4025895037ED5B7502F257AADC50ADE6C0E424DDE8523414013378ADF59E7CAE88EFA62B5E786BED011BBD64BAAD61F4DADC7B15FCF755CBF1DF0403DF034E01BDB84A0EEE9D14CA789CFF5160FABBE47664");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F2DF05083230303931323331DF060101DF070101DF02A01785333AA3B9F0BFEBF9386FB3E34D8D3D352BB663C05DFC06317BF933DB4C23EC6183CEB7F59F4E1EDE52AB4D2FA1BE98D86E2163DCA6C90023A8C659D9C4146517F409D0204B21983B8168F1F762FD05DE9D96BCE266457CE44B9950105E0773250FBB846FE53859A6B853CC6A67D87BBACA27EFBFFDDF2413D81D190AD7D11CBA39361F0436797BB6D7E4D187EDCBF21ABAFA57B9041EA45C24656D9EF7826B02DD23A32C31D0BCA7ACEA28BC9BDF0403DF030EF223E2BF8A89F42862B07452DF71E99CAF7ACF");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F220115DF05083230303931323331DF060101DF070101DF029F195B12D96931CFEF724283EFA2B564EAC6033A854DAB488B66D0E0EA242FD1E77EFBC5AB9D571025A6B47378FC868C655255C2EDFBAB76FE9EEC0BACA132CC91C4305D5F10F8170660DFDD3E16EBDA280A858590B790615FFC46B46F74D981D50B004A15A504FD50C42FA360CF5C019CAF0CA9A3D6D03EED40F31DF4AA0BEC72CC724EDC41570B94C9766AE3C399136C6DD551151BA079274919ED83F4D2A69942406AF6BBA0EC1E5EECBEA47D6FBDDF0403DF0387185F1BB916EBCE72BDC64818F0A48479A96034");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F3DF05083230303931323331DF060101DF070101DF029868C23FFC0128D1F3717D4C7DCA3C9750E6071B6DA48F415C21EC322E4FD2DAA14E8B1801329A97A3078278170293BDFA218D6EAC7FDE8AFE82C4AD0A3D5311EAC755D78B3295DC902EF2B17A19CC726C5F4F06406E61F1731D3EB78EF252C805C107CCBF5E14E7A519202F5664EBD22F56A7F86D9CBB7B8D85EB1ED584ED3D405E143DB229D2886937BCF8473FAAF7E13627D0708DC65F329A5511E4F6A60FC00922A18C32F4AB244FB9C89B54F6D5DF0403DF03BC95240A62A971A1D237F1037E5B8A6B201159CA");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F4DF05083230303931323331DF060101DF070101DF02BD9B0E47DBE242E9236C44EA90BB78430CA770C7F7887B2A07ECD72787EB66487AABDFBBE6F04857CF4C8A268638ADF8FE01CF03EB0CB8FD93FC64BB19F2333EBE6E00772281D16F4F8A472381F69D0876C06A3A5D4EE83D50A2B7784C07C6820924B5B60C4FCB45B5D5D7E7534C6216426374EAD8D12CA5BA9506CE7917085922DABF9B568DFFAA78053A989E377943223D07C9C896B3858912A22E6AD09748455F78CE8FCB8666C7886503D8F853D9DF0403DF03E244CAF98B2774605EB8BE5B462A7552B0CB6113");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F7DF05083230303931323331DF060101DF070101DF0291FA7829CE0A70AD7EBF11072E8F29A193DDEEA555F0DB6A54FFEB95C8D395CA21B1929AAA77CCB8BE2CBEAF9E494C0A28DC61004A97FAB2623674302DF626F0DB565B9A82093108E070FB43FB74D8BDFCDA454B2174EF86B3A82BFCE7245ADC18610C6214F021B1FAED4C253593C58D36A58DC4480EA49DB36A69CD05B2A024DE3E1D4CCCB2B36FDC433AD00AE51562DF304BFF1B0D82A1147A9AB460FD8D9249127C77D750485E3F195D46E75E85C0697456F2578B1C84F3EFC1CDBEFE6C2572A6A1B1A41AF753A900CF20FCAE15C118A0FC016713134CD44C90A6331F9FFF301AA2EEC989808F9E5DEA9677A1543CEDEC4FDDE0BFC253DF0403DF03CC9F722D0C78A2667A798BD59F11D1F661567028");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201FEDF05083230303931323331DF060101DF070101DF02B603CC514D59FF22FE85902481E2587607B4B9A8CB57286F0CC5E81AD53E640EBE78EE5D7DCE0381DA23BF620123AFDB52B2CA9F63903601BB52A8E455401D68E56CF498D43C8503A7D0F4C6FD06D6623BE880D410EF567C0866D085025DD5AFCAB44311484F70B249CC75E4173E6151C2052A0BDB8D688C89E09744A2AEAA096F90861D11FC50B9CFE5AE22489332C9151BEC1573BE09016BD6ECEC98D9E9BD5962D18C25AE7EB0FC7C812E1FA490C05DFA39D20961627967E297789991E58C09900845F2E3460C4A964BC067916B92AD50F4FAB9F9649FE6A2B22A6B7DA1E5E8B4DB5F3AF5CE14C6EB3A75787EC9AD8672C5EBC81883D1DF0403DF0333F16082A2F51F32F1926E107C73A8F4FCF406DF");
                        nlPosManager.addCAPublicKey("9F0605AAA00000019F2201F8DF05083230303931323331DF060101DF070101DF02E7537480F53F78C8551F9C8198B9607C64237E1570FA13523950E94180829D3D7F8BCE479386A97C294903199C95876D59B25A7E99986865D0F9C6FC0F2487FAA2AEB747A417E7E8F09D486E2D01ED66B17B4BCF761862E0B89A35C08DF72DCFCF811D4B4973390767249EEC641EF57A76720C3FFC5BEBED05721A36217996189140400E74A7A1CC9FAC15210CE672EA79CF86B7D6FB2AE3D21BE424ACF61B3B3F0B39663CE6AB707327DFEC9B4E8A683F68298A7B841F563D611EC27577DD61ED70AF479F1E367DF5025210B4F61D1A7028C9C714F7ABA50005A7736DBDBC54A7001D835F0542154A3CCBA5A4CDF46A5A762A4C687E4083DF0403DF03E967F6BCE9CD20C6AB0732418F17F0C320EC6AA5");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F22010FDF05083230303931323331DF060101DF070101DF02B0C8D5AC27A5E1FB89978C7C6479AF993AB3800EB243996FBB2AE26B67B23AC482C4B746005A51AFA7D2D83E894F591A2357B30F85B85627FF15DA12290F70F05766552BA11AD34B7109FA49DE29DCB0109670875A17EA95549E92347B948AA1F045756DE56B707E3863E59A6CBE99C1272EF65FB66CBB4CFF070F36029DD76218B21242645B51CA752AF37E70BE1A84FF31079DC0048E928883EC4FADD497A719385C2BBBEBC5A66AA5E5655D18034EC5DF0314A73472B3AB557493A9BC2179CC8014053B12BAB4");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220110DF05083230303931323331DF060101DF070101DF02F8CF98DFEDB3D3727965EE7797723355E0751C81D2D3DF4D18EBAB9FB9D49F38C8C4A826B99DC9DEA3F01043D4BF22AC3550E2962A59639B1332156422F788B9C16D40135EFD1BA94147750575E636B6EBC618734C91C1D1BF3EDC2A46A43901668E0FFC136774080E888044F6A1E65DC9AAA8928DACBEB0DB55EA3514686C6A732CEF55EE27CF877F110652694A0E3484C855D882AE191674E25C296205BBB599455176FDD7BBC549F27BA5FE35336F7E29E68D783973199436633C67EE5A680F05160ED12D1665EC83D1997F10FD05BBDBF9433E8F797AEE3E9F02A34228ACE927ABE62B8B9281AD08D3DF5C7379685045D7BA5FCDE58637DF0314C729CF2FD262394ABC4CC173506502446AA9B9FD");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220103DF05083230303931323331DF060101DF070101DF0280B0C2C6E2A6386933CD17C239496BF48C57E389164F2A96BFF133439AE8A77B20498BD4DC6959AB0C2D05D0723AF3668901937B674E5A2FA92DDD5E78EA9D75D79620173CC269B35F463B3D4AAFF2794F92E6C7A3FB95325D8AB95960C3066BE548087BCB6CE12688144A8B4A66228AE4659C634C99E36011584C095082A3A3E3DF03148708A3E3BBC1BB0BE73EBD8D19D4E5D20166BF6C");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220104DF05083230303931323331DF060101DF070101DF0260D0F543F03F2517133EF2BA4A1104486758630DCFE3A883C77B4E4844E39A9BD6360D23E6644E1E071F196DDF2E4A68B4A3D93D14268D7240F6A14F0D714C17827D279D192E88931AF7300727AE9DA80A3F0E366AEBA61778171737989E1EE309DF0314FDD7139EC7E0C33167FD61AD3CADBD68D66E91C5");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220165DF05083230303931323331DF060101DF070101DF0290E53EB41F839DDFB474F272CD0CBE373D5468EB3F50F39C95BDF4D39FA82B98DABC9476B6EA350C0DCE1CD92075D8C44D1E57283190F96B3537D9E632C461815EBD2BAF36891DF6BFB1D30FA0B752C43DCA0257D35DFF4CCFC98F84198D5152EC61D7B5F74BD09383BD0E2AA42298FFB02F0D79ADB70D72243EE537F75536A8A8DF962582E9E6812F3A0BE02A4365400DDF0314894C5D08D4EA28BB79DC46CEAD998B877322F416");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220167DF05083230303931323331DF060101DF070101DF02B0C687ADCCF3D57D3360B174E471EDA693AA555DFDC6C8CD394C74BA25CCDF8EABFD1F1CEADFBE2280C9E81F7A058998DC22B7F22576FE84713D0BDD3D34CFCD12FCD0D26901BA74103D075C664DABCCAF57BF789494051C5EC303A2E1D784306D3DB3EB665CD360A558F40B7C05C919B2F0282FE1ED9BF6261AA814648FBC263B14214491DE426D242D65CD1FFF0FBE4D4DAFF5CFACB2ADC7131C9B147EE791956551076270696B75FD97373F1FD7804FDF031452A2907300C8445BF54B970C894691FEADF2D28E");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F220168DF05083230303931323331DF060101DF070101DF02F8F4D198F2F0CF140E4D2D81B765EB4E24CED4C0834822769854D0E97E8066CBE465029B3F410E350F6296381A253BE71A4BBABBD516625DAE67D073D00113AAB9EA4DCECA29F3BB7A5D46C0D8B983E2482C2AD759735A5AB9AAAEFB31D3E718B8CA66C019ECA0A8BE312E243EB47A62300620BD51CF169A9194C17A42E51B34D83775A98E80B2D66F4F98084A448FE0507EA27C905AEE72B62A8A29438B6A4480FFF72F93280432A55FDD648AD93D82B9ECF01275C0914BAD8EB3AAF46B129F8749FEA425A2DCDD7E813A08FC0CA7841EDD49985CD8BC6D5D56F17AB9C67CEC50BA422440563ECCE21699E435C8682B6266393672C693D8B7DF0314415E5FE9EC966C835FBB3E6F766A9B1A4B8674C3");
                        nlPosManager.addCAPublicKey("9F0605A0000000259F22010EDF05083230303931323331DF060101DF070101DF0290AA94A8C6DAD24F9BA56A27C09B01020819568B81A026BE9FD0A3416CA9A71166ED5084ED91CED47DD457DB7E6CBCD53E560BC5DF48ABC380993B6D549F5196CFA77DFB20A0296188E969A2772E8C4141665F8BB2516BA2C7B5FC91F8DA04E8D512EB0F6411516FB86FC021CE7E969DA94D33937909A53A57F907C40C22009DA7532CB3BE509AE173B39AD6A01BA5BB85DF040103DF0314A7266ABAE64B42A3668851191D49856E17F8FBCD");
                    */
                    }
                });

                t.start();

                try {
                    t.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                sharedPreferencesEditor.putString(direccion,direccion);
                sharedPreferencesEditor.putString("DireccionUltimaConexion",direccion);
                sharedPreferencesEditor.commit();
                direccion ="";
                Log.d("SHARED PREFERENCES",sharedPreferences.getAll().toString());

                try{

                    Message conexionExitosa= new Message();
                    conexionExitosa.what = 1;
                    pantallaAjustesUsuarioComun.procesoTransacion.sendMessage(conexionExitosa);

                }catch (Exception e){ }
            }




            /*Message estadoActivo = new Message();
            estadoActivo.what = 2;
            LogoComercio.estado.sendMessage(estadoActivo);*/
        }

        @Override
        public void onConnectTimeOut() {
            try{
                Message conexionFallida = new Message();
                conexionFallida.what = 2;
                pantallaAjustesUsuarioComun.procesoTransacion.sendMessage(conexionFallida);
            }catch (Exception e){ }
        }

        @Override
        public void onDeviceDisconnect() {
            //appendString("onDeviceDisconnect");


        }

        @Override
        public void onGetDeviceInfo(DeviceInformation deviceInfo) {
            //appendString("onGetDeviceInfo, sn = "+deviceInfo.getSn());
        }

        @Override
        public void onGetDateTimeSucc(String deviceTime) {
            //appendString("onGetDateTimeSucc, deviceTime = "+deviceTime);
        }

        @Override
        public void onSetDateTimeSucc() {
            //appendString("onSetDateTimeSucc");
        }

        @Override
        public void onSetParamSucc() {
            //appendString("onSetParamSucc");
        }

        @Override
        public void onGetParamSucc(byte[] value) {
            // appendString("onGetParamSucc value = "+ Dump.getHexDump(value));
        }

        @Override
        public void onLoadMainKeySucc() {
            //appendString("onLoadMainKeySucc");
        }

        @Override
        public void onLoadWorkingKeySucc() {

            // appendString("onLoadWorkingKeySucc");
        }

        @Override
        public void onLoadIPEKSucc() {

            //  appendString("onLoadIPEKSucc");
        }

        @Override
        public void onAddAIDSucc() {

            //  appendString("onAddAIDSucc");
        }

        @Override
        public void onAddCAPKSucc() {

            // appendString("onAddCAPKSucc");
        }

        @Override
        public void onGetAIDListSucc(List<AIDConfig> aidconfigLst) {
            //appendString("onGetAIDListSucc ");
            // for(AIDConfig aidInfo : aidconfigLst){
            // appendString("9f06 = "+ Dump.getHexDump(aidInfo.getAid()));
            //}
        }

        @Override
        public void onClearAIDsSucc() {

            //appendString("onClearAIDsSucc");
        }

        @Override
        public void onClearCAPKSucc()
        {
            //appendString("onClearCAPKSucc");
        }

        @Override
        public void onShowMessageSucc()
        {
            //appendString("onShowMessageSucc");
        }

        @Override
        public void onClearScreenSucc() {


            // appendString("onClearScreenSucc");
        }

        @Override
        public void onCallBuzzerSucc() {

            //  appendString("onCallBuzzerSucc");
        }

        @Override
        public void onOperateLightSucc() {

            // appendString("onOperateLightSucc");
        }

        @Override
        public void onCancelTradeSucc() {
            //appendString("onCancelTradeSucc");
        }

        @Override
        public void requestSelectApplication(byte[] aidList) {
            //appendString("requestSelectApplication = " + Dump.getHexDump(aidList));
            //addSelectApplication
        }

        @Override
        public void onReadCardSucc(CardInfoEntity cardInfoEntity) {
           /* appendString("onReadCardSucc = " + cardInfoEntity.getCardNo());
            appendString("ksn = " + Dump.getHexDump(cardInfoEntity.getKsn()));

            if (cardInfoEntity.getPinKsn() != null) {
                appendString("PinKsn = " + Dump.getHexDump(cardInfoEntity.getPinKsn()));
            }

            appendString("StrTrack1 = " + Dump.getHexDump(cardInfoEntity.getStrTrack1()));
            appendString("StrTrack2 = " + cardInfoEntity.getStrTrack2());
            appendString("StrTrack2 = " + Dump.getHexDump(cardInfoEntity.getStrTrack2()));
            appendString("StrTrack3 = " + Dump.getHexDump(cardInfoEntity.getStrTrack3()));
            appendString("Card No= " + cardInfoEntity.getCardNo());
            appendString("Pan Sequence = " + cardInfoEntity.getPanSeqNo());
            appendString("Card type = " + cardInfoEntity.getCardType());
            appendString("card Expiry Date = " + cardInfoEntity.getExpiryDate());
            appendString("iccData = " + Dump.getHexDump(cardInfoEntity.getIccDataPlain()));
            appendString("Encrypted = " + Dump.getHexDump(cardInfoEntity.getIccDataEncrypt()));
            appendString("pinblock = " + Dump.getHexDump(cardInfoEntity.getPinBlock()));

            nlPosManager.calculateMAC(PinManageType.DUKPT, DEFAULT_MAC_WK_INDEX, ISOUtils.hex2byte(DataforMac), MacAlgorithm.MAC_X919);
            */

           Log.d("Modo Lectura",String.valueOf(cardInfoEntity.getCardType()));
           Log.d("CARDTYPE",Dump.getHexDump(cardInfoEntity.getIccDataPlain()));

           //Se obtiene el track dos y se hace el Split en el caracter correspondiente.

            /*track2 = Dump.getHexDump(cardInfoEntity.getStrTrack2()).split("D");
           bin = track2[0].substring(0,7);

           datosTarjeta.setTrack1(Dump.getHexDump(cardInfoEntity.getStrTrack1()));
           datosTarjeta.setTrack2(Dump.getHexDump(cardInfoEntity.getStrTrack2()));
           datosTarjeta.setTrack3(Dump.getHexDump(cardInfoEntity.getStrTrack3()));
           datosTarjeta.setPan(track2[0]);
           datosTarjeta.setFechaExpiracion(track2[1].substring(0,6));
           datosTarjeta.setKsn(Dump.getHexDump(cardInfoEntity.getKsn()));
           datosTarjeta.setPinBlock(Dump.getHexDump(cardInfoEntity.getPinBlock()));
           datosTarjeta.setKsnPinBlock(Dump.getHexDump(cardInfoEntity.getPinKsn()));
           datosTarjeta.setUltimosCuatro(track2[0].substring(17));*/

           if (Dump.getHexDump(cardInfoEntity.getIccDataPlain())=="0"){

               datosTarjeta.setTrack1(Dump.getHexDump(cardInfoEntity.getStrTrack1()));
               datosTarjeta.setTrack2(Dump.getHexDump(cardInfoEntity.getStrTrack2()));
               datosTarjeta.setTrack3(Dump.getHexDump(cardInfoEntity.getStrTrack3()));
               datosTarjeta.setFechaExpiracion(cardInfoEntity.getExpiryDate());
               //card.setUltimosCuatro(track2[0].substring(track2[0].length()-4, track2[0].length()));
               datosTarjeta.setKsn(Dump.getHexDump(cardInfoEntity.getKsn()));
               datosTarjeta.setKsnPinBlock(Dump.getHexDump(cardInfoEntity.getPinKsn()));
               datosTarjeta.setPinBlock(Dump.getHexDump(cardInfoEntity.getPinBlock()));

               switch (codigoTransaccion){

                   case RETIRO:

                       //Lectura de tarjeta exitosa en Retiro con Tarjeta
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = PantallaRetiroConTarjetaLoader.PROCESO_EXISTOSO;
                           PantallaRetiroConTarjetaLoader.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;

                   case CONSULTA_SALDO:

                       //Lectura de tarjeta exitosa en Consulta Saldo

                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = pantallaConsultaSaldoLectura.PROCESO_EXISTOSO;
                           pantallaConsultaSaldoLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }


                       break;
                   case TRANSFERENCIA:

                       //Lectura de tarjeta exitosa en Transferencia
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = pantallaTransferenciaLectura.PROCESO_EXISTOSO;
                           pantallaTransferenciaLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }
                       break;

                   case TARJETA_EMPRESARIAL:

                       //Lectura de tarjeta exitosa en TarjetaEmpresarial
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = PantallaTarjetaEmpresarialLectura.PROCESO_EXISTOSO;
                           PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;


               }

           }else if(Dump.getHexDump(cardInfoEntity.getIccDataPlain())=="1"){
               track2 = Dump.getHexDump(cardInfoEntity.getStrTrack2()).split("D");
               bin = track2[0].substring(0,7);

               datosTarjeta.setTrack1(Dump.getHexDump(cardInfoEntity.getStrTrack1()));
               datosTarjeta.setTrack2(Dump.getHexDump(cardInfoEntity.getStrTrack2()));
               datosTarjeta.setTrack3(Dump.getHexDump(cardInfoEntity.getStrTrack3()));
               datosTarjeta.setPan(track2[0]);
               datosTarjeta.setFechaExpiracion(track2[1].substring(0,6));
               datosTarjeta.setKsn(Dump.getHexDump(cardInfoEntity.getKsn()));
               datosTarjeta.setPinBlock(Dump.getHexDump(cardInfoEntity.getPinBlock()));
               datosTarjeta.setKsnPinBlock(Dump.getHexDump(cardInfoEntity.getPinKsn()));
               datosTarjeta.setUltimosCuatro(track2[0].substring(17));

               switch (codigoTransaccion){

                   case RETIRO:

                       //Lectura de tarjeta exitosa en Retiro con Tarjeta
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = PantallaRetiroConTarjetaLoader.PROCESO_EXISTOSO;
                           PantallaRetiroConTarjetaLoader.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;

                   case CONSULTA_SALDO:

                       //Lectura de tarjeta exitosa en Consulta Saldo

                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = pantallaConsultaSaldoLectura.PROCESO_EXISTOSO;
                           pantallaConsultaSaldoLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }


                       break;
                   case TRANSFERENCIA:

                       //Lectura de tarjeta exitosa en Transferencia
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = pantallaTransferenciaLectura.PROCESO_EXISTOSO;
                           pantallaTransferenciaLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }
                       break;

                   case TARJETA_EMPRESARIAL:

                       //Lectura de tarjeta exitosa en TarjetaEmpresarial
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = PantallaTarjetaEmpresarialLectura.PROCESO_EXISTOSO;
                           PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;

               }

           }else{

               switch (codigoTransaccion){

                   case RETIRO:

                       //Lectura de tarjeta exitosa en Retiro con Tarjeta
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = CONTACTLESS;
                           PantallaRetiroConTarjetaLoader.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;

                   case CONSULTA_SALDO:

                       //Lectura de tarjeta exitosa en Consulta Saldo

                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = CONTACTLESS;
                           pantallaConsultaSaldoLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }


                       break;
                   case TRANSFERENCIA:

                       //Lectura de tarjeta exitosa en Transferencia
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = CONTACTLESS;
                           pantallaTransferenciaLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }
                       break;

                   case TARJETA_EMPRESARIAL:

                       //Lectura de tarjeta exitosa en TarjetaEmpresarial
                       try{
                           Message respuestaLectura = new Message();
                           respuestaLectura.what = CONTACTLESS;
                           PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(respuestaLectura);
                       }catch (Exception e){ }

                       break;

               }

           }






           Log.d("TARJETA CARDDTO",datosTarjeta.toString());
        /*    nlPosManager.calculateMAC(PinManageType.DUKPT, DEFAULT_MAC_WK_INDEX, ISOUtils.hex2byte(DataforMac), MacAlgorithm.MAC_X919);

            switch (codigoTransaccion){

                case RETIRO:

                    //Lectura de tarjeta exitosa en Retiro con Tarjeta
                    try{
                        Message respuestaLectura = new Message();
                        respuestaLectura.what = PantallaRetiroConTarjetaLoader.PROCESO_EXISTOSO;
                        PantallaRetiroConTarjetaLoader.respuesta.sendMessage(respuestaLectura);
                    }catch (Exception e){ }

                    break;

                case CONSULTA_SALDO:

                    //Lectura de tarjeta exitosa en Consulta Saldo

                    try{
                        Message respuestaLectura = new Message();
                        respuestaLectura.what = pantallaConsultaSaldoLectura.PROCESO_EXISTOSO;
                        pantallaConsultaSaldoLectura.respuesta.sendMessage(respuestaLectura);
                    }catch (Exception e){ }


                    break;
                case TRANSFERENCIA:

                    //Lectura de tarjeta exitosa en Transferencia
                    try{
                        Message respuestaLectura = new Message();
                        respuestaLectura.what = pantallaTransferenciaLectura.PROCESO_EXISTOSO;
                        pantallaTransferenciaLectura.respuesta.sendMessage(respuestaLectura);
                    }catch (Exception e){ }
                    break;

                case TARJETA_EMPRESARIAL:

                    //Lectura de tarjeta exitosa en TarjetaEmpresarial
                    try{
                        Message respuestaLectura = new Message();
                        respuestaLectura.what = PantallaTarjetaEmpresarialLectura.PROCESO_EXISTOSO;
                        PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(respuestaLectura);
                    }catch (Exception e){ }

                    break;


            }
*/




        }

        @Override
        public void onInputPinCompleted(byte[] pinBlock, byte[] ksn) {
            //   appendString("onInputPinCompleted, pinBlock = " + Dump.getHexDump(pinBlock) +", ksn = "+ Dump.getHexDump(ksn));
            pinBlockFinal = Dump.getHexDump(pinBlock);

            //Lectura del pin de forma correta en Retiro sin tarjeta
            try{
                //Se envia un mensaje al handler de la clase retiro con tarjeta, para que se muestre el popUp de dispositivo desconectado

                Message desconexion = new Message();
                desconexion.what = pantallaRetiroSinTarjetaPin.PROCESO_EXISTOSO;
                pantallaRetiroSinTarjetaPin.respuesta.sendMessage(desconexion);
            }catch (Exception e){

            }
        }

        @Override
        public void onGetMACSucc(byte[] macData, byte[] ksn) {
            //  appendString("onGetMACSucc = " + Dump.getHexDump(macData) + ", ksn = "+ Dump.getHexDump(ksn));
            Log.d("MAC","onGetMACSucc = " + Dump.getHexDump(macData) + ", ksn = "+ Dump.getHexDump(ksn));
        }

        @Override
        public void onUpdateFirmwareProcess(float process) {
            // appendString("onUpdateFirmwareProcess = " + process);
        }

        @Override
        public void onUpdateFirmwareSucc() {

            // appendString("onUpdateFirmwareSucc ");
        }

        @Override
        public void onSetTerminalParamsSucc() {

            //  appendString("onSetTerminalParamsSucc ");
        }

        @Override
        public void onReceiveErrorCode(int errCode, String errInfo) {

            Log.d("CODIGO DE ERROR",errInfo);
            Log.d("DECRIPCION ERROR",errInfo);
            // appendString("onReceiveErrorCode, errCode = " + errCode +", errInfo =" +errInfo);

            //Error dispositivo esta apagado
              if(errCode == ErrorCode.ERR_BTDISCONNECTED){

                  switch (codigoTransaccion){
                      case RETIRO:

                          try{
                              //Se envia un mensaje al handler de la clase retiro con tarjeta, para que se muestre el popUp de dispositivo desconectado

                              Message desconexion = new Message();
                              desconexion.what = PantallaRetiroConTarjetaLoader.DISPOSITIVO_DESCONECTADO;
                              PantallaRetiroConTarjetaLoader.respuesta.sendMessage(desconexion);
                          }catch (Exception e){ }

                          break;

                      case CONSULTA_SALDO:

                          try{
                              //Se envia un mensaje al handler de la retiroSinTarjetaPin para que se muestre el popUp de dispositivo desconectado

                              Message desconexion = new Message();
                              desconexion.what = pantallaConsultaSaldoLectura.DISPOSITIVO_DESCONECTADO;
                              pantallaConsultaSaldoLectura.respuesta.sendMessage(desconexion);
                          }catch (Exception e){ }

                          break;

                      case TRANSFERENCIA:
                          try{
                              //Se envia un mensaje al handler de la retiroSinTarjetaPin para que se muestre el popUp de dispositivo desconectado

                              Message desconexion = new Message();
                              desconexion.what = pantallaTransferenciaLectura.DISPOSITIVO_DESCONECTADO;
                              pantallaTransferenciaLectura.respuesta.sendMessage(desconexion);
                          }catch (Exception e){ }

                          break;

                      case TARJETA_EMPRESARIAL:

                          try{
                              //Se envia un mensaje al handler de la pago tarjeta empresarial para que se muestre el popUp de dispositivo desconectado

                              Message desconexion = new Message();
                              desconexion.what = PantallaTarjetaEmpresarialLectura.DISPOSITIVO_DESCONECTADO;
                              PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(desconexion);
                          }catch (Exception e){ }

                          break;


                  }


                  try{
                      //Se envia un mensaje al handler de la retiroSinTarjetaPin para que se muestre el popUp de dispositivo desconectado

                      Message desconexion = new Message();
                      desconexion.what = pantallaRetiroSinTarjetaPin.DISPOSITIVO_DESCONECTADO;
                      pantallaRetiroSinTarjetaPin.respuesta.sendMessage(desconexion);
                  }catch (Exception e){ }



              }

              //Error lectura de tarjeta fallida
              else if (errInfo.equals("Fail to obtain card information")){


                  switch (codigoTransaccion){

                      case RETIRO:

                          //Lectura de tarjeta fallida en Retiro con Tarjeta
                          try{
                              //Se envia un mensaje al handler de la clase retiro con tarjeta, para que se muestre el popUp de transaccion cancelada

                              Message errorLectura = new Message();
                              errorLectura.what = PantallaRetiroConTarjetaLoader.ERROR_DE_LECTURA;
                              PantallaRetiroConTarjetaLoader.respuesta.sendMessage(errorLectura);
                          }catch (Exception e){ }

                          break;

                      case CONSULTA_SALDO:

                          //Lectura de tarjeta fallida en Consulta de Saldo

                          try{
                              //Se envia un mensaje al handler de la clase retiro con tarjeta, para que se muestre el popUp de transaccion cancelada

                              Message errorLectura = new Message();
                              errorLectura.what = pantallaConsultaSaldoLectura.ERROR_DE_LECTURA;
                              pantallaConsultaSaldoLectura.respuesta.sendMessage(errorLectura);
                          }catch (Exception e){ }

                          break;

                      case TRANSFERENCIA:

                          //Lectura de tarjeta fallida en Transferencia

                          try{
                              //Se envia un mensaje al handler de la clase transferencia, para que se muestre el popUp de transaccion cancelada

                              Message errorLectura = new Message();
                              errorLectura.what = pantallaTransferenciaLectura.ERROR_DE_LECTURA;
                              pantallaTransferenciaLectura.respuesta.sendMessage(errorLectura);
                          }catch (Exception e){ }

                          break;

                      case TARJETA_EMPRESARIAL:

                          //Lectura de tarjeta fallida en Transferencia

                          try{
                              //Se envia un mensaje al handler de la clase transferencia, para que se muestre el popUp de transaccion cancelada

                              Message errorLectura = new Message();
                              errorLectura.what = PantallaTarjetaEmpresarialLectura.ERROR_DE_LECTURA;
                              PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(errorLectura);
                          }catch (Exception e){ }

                          break;
                  }





              }

              //Error lectura de pin fallida
              else  if (errInfo.equals("Fail to input PIN")){
                  try{
                      //Se envia un mensaje al handler de la clase retiroSinTarjeta, para que se muestre el popUp de transaccion cancelada
                      Message errorLectura = new Message();
                      errorLectura.what = pantallaRetiroSinTarjetaPin.ERROR_DE_LECTURA;
                      pantallaRetiroSinTarjetaPin.respuesta.sendMessage(errorLectura);
                  }catch (Exception e){ }
              }

              else if(errInfo.equalsIgnoreCase("Canceled by the user")){

                  switch (codigoTransaccion){
                      case RETIRO:
                          try{
                              //Se envia un mensaje al handler de la clase retiro con tarjeta, indicando que el usuario cancelo la transaccion
                              Message usuarioCancela = new Message();
                              usuarioCancela.what = PantallaRetiroConTarjetaLoader.CANCELADO_POR_USUARIO;
                              PantallaRetiroConTarjetaLoader.respuesta.sendMessage(usuarioCancela);
                          }catch (Exception e){ }

                          break;

                      case CONSULTA_SALDO:

                          try{
                              //Se envia un mensaje al handler de la clase consulta saldo, indicando que el usuario cancelo la transaccion
                              Message usuarioCancela = new Message();
                              usuarioCancela.what = pantallaConsultaSaldoLectura.CANCELADO_POR_USUARIO;
                              pantallaConsultaSaldoLectura.respuesta.sendMessage(usuarioCancela);
                          }catch (Exception e){ }

                          break;


                      case TRANSFERENCIA:
                          try{
                              //Se envia un mensaje al handler de la clase transferencia, indicando que el usuario cancelo la transaccion
                              Message usuarioCancela = new Message();
                              usuarioCancela.what = pantallaTransferenciaLectura.CANCELADO_POR_USUARIO;
                              pantallaTransferenciaLectura.respuesta.sendMessage(usuarioCancela);
                          }catch (Exception e){ }
                          break;

                      case TARJETA_EMPRESARIAL:
                          try{
                              //Se envia un mensaje al handler de la clase pago factura empresarial, indicando que el usuario cancelo la transaccion
                              Message usuarioCancela = new Message();
                              usuarioCancela.what = PantallaTarjetaEmpresarialLectura.CANCELADO_POR_USUARIO;
                              PantallaTarjetaEmpresarialLectura.respuesta.sendMessage(usuarioCancela);
                          }catch (Exception e){ }
                          break;

                      default:

                          try{
                              //Se envia un mensaje al handler de la clase retiro sin tarjeta, indicando que el usuario cancelo la transaccion
                              Message usuarioCancela = new Message();
                              usuarioCancela.what = pantallaRetiroSinTarjetaPin.CANCELADO_POR_USUARIO;
                              pantallaRetiroSinTarjetaPin.respuesta.sendMessage(usuarioCancela);
                          }catch (Exception e){ }

                          break;
                  }

              } else if (errInfo.equals("Fail to check card state")){
                  Log.d("ESTADO TARJETA",errInfo);
                  estado = errInfo;
              }

        }

        @Override
        public void onIncreaseKsnSucc() {
            //   appendString("onIncreaseKsnSucc ");
        }

        @Override
        public void onCheckCardStateSucc(CARD_STATE card_state) {
            //  appendString("onCheckCardStateSucc = " + card_state.toString());
            if (card_state.toString().equals("IC_CARD")){
                Log.d("CHECKCARDSTATE",card_state.toString());
                estado = card_state.toString();
            }
        }

        @Override
        public void onSetLanguageTypeSucc() {

        }

        @Override
        public void onLoadpublickeySucc() {

        }

        @Override
        public void onGetTransportSessionKey(String s, String s1) {

        }

        @Override
        public void onSecondIssuance(int excuteRslt, byte[] iccData) {
            // appendString("onSecondIssuance = "+ excuteRslt + ",iccData = " + Dump.getHexDump(iccData));
        }

        public void onGetTransportSessionKey(String paramString){

            // appendString("onGetTransportSessionKey = "+ paramString);
        }
    };


    /** Metodo de tipo void, que recibe como parametro el contexto de la activity desde la cual se esta creando la instancia.
     * Se encarga de inicializar las variables u objetos necesarios para capturar la información del mpos y el sharedpreferences */

    public MetodosSDKNewland(Context context1){

        this.context = context1;

        sdkInit();

        datosTarjeta = new CardDTO();

        bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);
        bluetoothAdapter = bluetoothManager.getAdapter();

        nlPosManager= (NLPosManager) new NLPosManager().sharedInstance(context, swiperCardChangedListener);

        sharedPreferences = context1.getSharedPreferences("dispositivos",context1.MODE_PRIVATE);


        sharedPreferencesEditor = sharedPreferences.edit();

    }


    /**Metodo de tipo void, el cual se encarga de realizar la busqueda de dispositivos bluetooth*/

    public void scanDevice()  {

            if (bluetoothAdapter.isEnabled()) {
                listDevices.clear();
                nlPosManager.scanBlueDevice(TIMEOUT);
            } else {
                Toast.makeText(context,"Active Bluetooth",Toast.LENGTH_SHORT).show();
                try{
                    Message apagarLeds = new Message();
                    apagarLeds.what = 4;
                    pantallaAjustesUsuarioComun.procesoTransacion.sendMessage(apagarLeds);
                }catch (Exception e){}
            }

    }


    /**Metodo de tipo void, que recibe como parametro un entero que es el tiempo de intento de conexiòn, y un String que es la
     * dirección Mac del dispositivo con el que se busca conectar.*/

    public void connectDevice(int tiempo, String direccion){

        this.direccion = direccion;
        nlPosManager.connectDeviceByBluetooth(tiempo,direccion);

    }

    /** Metodo de tipo void que se encarga de desconectar el dispositivo con el cual se encuentra emparejado el celular.*/

    public void disconnectDevice(){

        nlPosManager.disconnectDevice();
    }

    /** Metodo de tipo void que se encarga de mostrar el estado de conexión del dispositivo con el que esta emparejado el celular*/

    public boolean isConnected(){

        return  nlPosManager.isConnected();

    }

    /**Metodo que retorna un ArrayList de tipo String el cual contiene la lista de dispositivos encontrados*/

    public ArrayList<String> getListDevices(){
        Log.d("LISTA2", listDevices.toString());

        return this.listDevices;
    }

    /**Metodo void de tipo set para la lista de dispositivos*/

    public void setListDevices(ArrayList<String> lista ){
        this.listDevices = lista;
    }


    /**Metodo que retorna un objeto de tipo CardDTO*/

    public CardDTO getDatosTarjeta(){

        return this.datosTarjeta;
    }

    /**Metodo de tipo void que funciona para habilitar la lectura de tarjetas en el dispositivos MPOS*/

    public void readCard(String cantidadTransaccion, boolean cantidadActiva, int codigo){

        this.codigoTransaccion =codigo;

        if (cantidadActiva){
            ReadCardInfo paramsInfo = new ReadCardInfo();
            paramsInfo.setOpenCardType(new OpenCardType[] { OpenCardType.SWIPER, OpenCardType.ICCARD, OpenCardType.NCCARD });
            paramsInfo.setAmout(new BigDecimal(cantidadTransaccion));
            paramsInfo.setCashback(new BigDecimal("0.00"));
            BigDecimal totalAmount = new BigDecimal("0.00");
            totalAmount =paramsInfo.getAmout().add(paramsInfo.getCashback());
            String strAmountDisplay = String.format("Total : %s\n  INSERT/SWIPE/WAVE",totalAmount);
            paramsInfo.setText(strAmountDisplay);
            paramsInfo.setCipherTag(cipherTag);
            paramsInfo.setPlainTag(plainTag);
            paramsInfo.setEFSupportAppsel(false);
            paramsInfo.setEncrypt(true);
            paramsInfo.setForceOnline(true);
            paramsInfo.setWkIndex(DEFAULT_DATA_WK_INDEX);
            paramsInfo.setPkIndex(DEFAULT_PIN_WK_INDEX);
            paramsInfo.setType(DataEncryptTypeEnum.DUKPT);
            paramsInfo.setTimeout(TIMEOUT);
            String formatDisplayContent = String.format("Total : %s\n      ENTER PIN", totalAmount);
            paramsInfo.setDisplayContent(formatDisplayContent);
            nlPosManager.startReadCard(paramsInfo);


        }else{

            ReadCardInfo paramsInfo = new ReadCardInfo();
            paramsInfo.setOpenCardType(new OpenCardType[] { OpenCardType.SWIPER, OpenCardType.ICCARD, OpenCardType.NCCARD });
            paramsInfo.setAmout(new BigDecimal("0.00"));
            paramsInfo.setCashback(new BigDecimal("0.00"));
            BigDecimal totalAmount = new BigDecimal("0.00");
            totalAmount =paramsInfo.getAmout().add(paramsInfo.getCashback());
            String strAmountDisplay = String.format("Total : \n INSERT/SWIPE/WAVE");
            paramsInfo.setText(strAmountDisplay);
            paramsInfo.setCipherTag(cipherTag);
            paramsInfo.setPlainTag(plainTag);
            paramsInfo.setEFSupportAppsel(false);
            paramsInfo.setEncrypt(true);
            paramsInfo.setForceOnline(true);
            paramsInfo.setWkIndex(DEFAULT_DATA_WK_INDEX);
            paramsInfo.setPkIndex(DEFAULT_PIN_WK_INDEX);
            paramsInfo.setType(DataEncryptTypeEnum.DUKPT);
            paramsInfo.setTimeout(TIMEOUT);
            String formatDisplayContent = String.format("ENTER PIN");
            paramsInfo.setDisplayContent(formatDisplayContent);
            nlPosManager.startReadCard(paramsInfo);

        }

    }

    /**Metodo de tipo void que se encarga de habilitar la entrada del pin en el dispositivo MPOS*/

    public void pinBlock(){
        String strTotalAmountDisplay  = String.format("Total : %s\n      ENTER PIN", 1);


        //pan virtual pruebas 6217731300813785
        //Se hace llamado al servicio que retorna el pan
        nlPosManager.startPinInput(PinManageType.DUKPT,DEFAULT_PIN_WK_INDEX,"6217731300813785",6,"60",strTotalAmountDisplay);
    }

    /**Metodo que retorna un String, para obtener el pinBlock */
    public String getPinBlockFinal(){
        return this.pinBlockFinal;
    }

    /**Metodo para verificar si se encuentra una tarjeta insertada en el dispositivo*/
    public String checkCardState(){
        nlPosManager.checkCardState();
        return estado;
    }



}
